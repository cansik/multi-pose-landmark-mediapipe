# MediaPipe graph to detect/predict pose landmarks on CPU.
#
# The procedure is done in two steps:
# - locate bodies/poses
# - detect landmarks for each body/pose.
# This graph tries to skip body detection as much as possible by reusing
# previously detected/predicted landmarks for new images.

type: "HandLandmarkTrackingCpu"

# CPU image. (ImageFrame)
input_stream: "IMAGE:image"

# Max number of poses to detect/track. (int)
input_side_packet: "NUM_POSES:num_poses"

# Collection of detected/predicted poses, each represented as a list of
# landmarks. (std::vector<NormalizedLandmarkList>)
# NOTE: there will not be an output packet in the LANDMARKS stream for this
# particular timestamp if none of poses detected. However, the MediaPipe
# framework will internally inform the downstream calculators of the absence of
# this packet so that they don't wait for it unnecessarily.
output_stream: "LANDMARKS:multi_pose_landmarks"

# Extra outputs (for debugging, for instance).
# Detected bodies. (std::vector<Detection>)
output_stream: "BODY_DETECTIONS:body_detections"
# Regions of interest calculated based on landmarks.
# (std::vector<NormalizedRect>)
output_stream: "POSE_ROIS_FROM_LANDMARKS:pose_rects"
# Regions of interest calculated based on body detections.
# (std::vector<NormalizedRect>)
output_stream: "POSE_ROIS_FROM_BODY_DETECTIONS:pose_rects_from_body_detections"

# Defines whether landmarks on the previous image should be used to help
# localize landmarks on the current image.
node {
  name: "ConstantSidePacketCalculator"
  calculator: "ConstantSidePacketCalculator"
  output_side_packet: "PACKET:use_prev_landmarks"
  options: {
    [mediapipe.ConstantSidePacketCalculatorOptions.ext]: {
      packet { bool_value: true }
    }
  }
}
node {
  calculator: "GateCalculator"
  input_side_packet: "ALLOW:use_prev_landmarks"
  input_stream: "prev_pose_rects_from_landmarks"
  output_stream: "gated_prev_pose_rects_from_landmarks"
}

# Determines if an input vector of NormalizedRect has a size greater than or
# equal to the provided num_poses.
node {
  calculator: "NormalizedRectVectorHasMinSizeCalculator"
  input_stream: "ITERABLE:gated_prev_pose_rects_from_landmarks"
  input_side_packet: "num_poses"
  output_stream: "prev_has_enough_poses"
}

# Drops the incoming image if enough poses have already been identified from the
# previous image. Otherwise, passes the incoming image through to trigger a new
# round of body detection.
node {
  calculator: "GateCalculator"
  input_stream: "image"
  input_stream: "DISALLOW:prev_has_enough_poses"
  output_stream: "body_detection_image"
  options: {
    [mediapipe.GateCalculatorOptions.ext] {
      empty_packets_as_allow: true
    }
  }
}

# Detects bodies.
node {
  calculator: "PoseDetectionCpu"
  input_stream: "IMAGE:body_detection_image"
  output_stream: "DETECTIONS:all_body_detections"
}

# Makes sure there are no more detections than the provided num_poses.
node {
  calculator: "ClipDetectionVectorSizeCalculator"
  input_stream: "all_body_detections"
  output_stream: "body_detections"
  input_side_packet: "num_poses"
}

# Extracts image size.
node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE:body_detection_image"
  output_stream: "SIZE:body_detection_image_size"
}

# Outputs each element of body_detections at a fake timestamp for the rest of
# the graph to process. Clones the image size packet for each body_detection at
# the fake timestamp. At the end of the loop, outputs the BATCH_END timestamp
# for downstream calculators to inform them that all elements in the vector have
# been processed.
node {
  calculator: "BeginLoopDetectionCalculator"
  input_stream: "ITERABLE:body_detections"
  input_stream: "CLONE:body_detection_image_size"
  output_stream: "ITEM:body_detection"
  output_stream: "CLONE:image_size_for_bodies"
  output_stream: "BATCH_END:body_detections_timestamp"
}

# Calculates region of interest (ROI) based on the specified body.
node {
  calculator: "PoseDetectionToRoi"
  input_stream: "DETECTION:body_detection"
  input_stream: "IMAGE_SIZE:image_size_for_bodies"
  output_stream: "ROI:pose_rect_from_body_detection"
}

# Collects a NormalizedRect for each pose into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of NormalizedRect at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopNormalizedRectCalculator"
  input_stream: "ITEM:pose_rect_from_body_detection"
  input_stream: "BATCH_END:body_detections_timestamp"
  output_stream: "ITERABLE:pose_rects_from_body_detections"
}

# Performs association between NormalizedRect vector elements from previous
# image and rects based on body detections from the current image. This
# calculator ensures that the output pose_rects vector doesn't contain
# overlapping regions based on the specified min_similarity_threshold.
node {
  calculator: "AssociationNormRectCalculator"
  input_stream: "pose_rects_from_body_detections"
  input_stream: "gated_prev_pose_rects_from_landmarks"
  output_stream: "pose_rects"
  options: {
    [mediapipe.AssociationCalculatorOptions.ext] {
      min_similarity_threshold: 0.5
    }
  }
}

# Extracts image size.
node {
  calculator: "ImagePropertiesCalculator"
  input_stream: "IMAGE_CPU:image"
  output_stream: "SIZE:image_size"
}

# Outputs each element of pose_rects at a fake timestamp for the rest of the
# graph to process. Clones image and image size packets for each
# single_pose_rect at the fake timestamp. At the end of the loop, outputs the
# BATCH_END timestamp for downstream calculators to inform them that all
# elements in the vector have been processed.
node {
  calculator: "BeginLoopNormalizedRectCalculator"
  input_stream: "ITERABLE:pose_rects"
  input_stream: "CLONE:0:image"
  input_stream: "CLONE:1:image_size"
  output_stream: "ITEM:single_pose_rect"
  output_stream: "CLONE:0:image_for_landmarks"
  output_stream: "CLONE:1:image_size_for_landmarks"
  output_stream: "BATCH_END:pose_rects_timestamp"
}

# Detect pose landmarks for the specific pose rect.
node {
  calculator: "PoseLandmarkByRoiCpu"
  input_stream: "IMAGE:image_for_landmarks"
  input_stream: "ROI:single_pose_rect"
  output_stream: "LANDMARKS:single_pose_landmarks"
  output_stream: "POSEEDNESS:single_poseedness"
}

# Calculate region of interest (ROI) based on detected pose landmarks to reuse
# on the subsequent runs of the graph.
node {
  calculator: "PoseLandmarksToRoi"
  input_stream: "IMAGE_SIZE:image_size_for_landmarks"
  input_stream: "LANDMARKS:single_pose_landmarks"
  output_stream: "ROI:single_pose_rect_from_landmarks"
}

# Collects a set of landmarks for each pose into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of landmarks at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopNormalizedLandmarkListVectorCalculator"
  input_stream: "ITEM:single_pose_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:multi_pose_landmarks"
}

# Collects a NormalizedRect for each pose into a vector. Upon receiving the
# BATCH_END timestamp, outputs the vector of NormalizedRect at the BATCH_END
# timestamp.
node {
  calculator: "EndLoopNormalizedRectCalculator"
  input_stream: "ITEM:single_pose_rect_from_landmarks"
  input_stream: "BATCH_END:pose_rects_timestamp"
  output_stream: "ITERABLE:pose_rects_from_landmarks"
}

# Caches pose rects calculated from landmarks, and upon the arrival of the next
# input image, sends out the cached rects with timestamps replaced by that of
# the input image, essentially generating a packet that carries the previous
# pose rects. Note that upon the arrival of the very first input image, a
# timestamp bound update occurs to jump start the feedback loop.
node {
  calculator: "PreviousLoopbackCalculator"
  input_stream: "MAIN:image"
  input_stream: "LOOP:pose_rects_from_landmarks"
  input_stream_info: {
    tag_index: "LOOP"
    back_edge: true
  }
  output_stream: "PREV_LOOP:prev_pose_rects_from_landmarks"
}